// ! forked from https://codepen.io/giana/pen/yYBpVY
// * $style: draw, meet, circle, spinTriangle

@mixin animateBorders(
  $style: 'draw',
  $borderWidth: 0.125em,
  $colorBG: transparent,
  $colorText: #f1f2f6,
  $colorTextHover: #ff5252,
  $ShadowBoxWidth: 0.125em
) {
  // ? parent container : isolation: isolate;

  background-color: $colorBG;
  border: 0;
  box-sizing: border-box;

  // Using inset box-shadow instead of border for sizing simplicity
  box-shadow: inset 0 0 0 $ShadowBoxWidth $colorText;
  color: $colorText;

  // Required, since we're setting absolute on pseudo-elements
  position: relative;
  text-align: center;
  vertical-align: middle;

  &::before,
  &::after {
    box-sizing: inherit;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  // ! comment to get only a border effect
  /*  &:hover,
  &:focus,
  &.focused {
    color: $colorTextHover;
  } */

  @if $style == 'draw' OR $style == 'meet' {
    transition: color 0.25s;

    &::before,
    &::after {
      // Set border to invisible, so we don't see a 4px border on a 0x0 element before the transition starts
      border: $borderWidth solid transparent;
      width: 0;
      height: 0;
    }

    // This covers the top & right borders (expands right, then down)
    &::before {
      top: 0;
      left: 0;
    }

    // And this the bottom & left borders (expands left, then up)
    &::after {
      bottom: 0;
      right: 0;
    }

    // Hover styles
    &:hover::before,
    &.focused::before,
    &:focus::before,
    &:hover::after,
    &:focus::after,
    &.focused::after {
      width: 100%;
      height: 100%;
      // ! added
      /*  z-index: 0; */
    }

    &:hover::before,
    &:focus::before,
    &.focused::before {
      border-top-color: $colorTextHover; // Make borders visible
      border-right-color: $colorTextHover;
      transition: width 0.25s ease-out,
        // Width expands first
          height
          0.25s
          ease-out
          0.25s; // And then height
    }

    &:hover::after,
    &:focus::after,
    &.focused::after {
      border-bottom-color: $colorTextHover; // Make borders visible
      border-left-color: $colorTextHover;
      transition: border-color 0s ease-out 0.5s,
        // Wait for ::before to finish before showing border
          width
          0.25s
          ease-out
          0.5s,
        // And then exanding width
          height
          0.25s
          ease-out
          0.75s; // And finally height
    }

    @if $style == 'meet' {
      // Start ::after in same position as ::before
      &::after {
        top: 0;
        left: 0;
      }

      // Change colors
      &:hover::before,
      &:focus::before,
      &.focused::before {
        border-top-color: $colorTextHover;
        border-right-color: $colorTextHover;
      }

      &:hover::after,
      &:focus::after,
      &.focused::after {
        border-bottom-color: $colorTextHover;
        border-left-color: $colorTextHover;
        transition: height 0.25s ease-out, width 0.25s ease-out 0.25s;
        //Animate height first, then width
      }
    }
  }

  // Border spins around element
  // ::before holds three borders that appear separately, one at a time
  // ::after holds one border that spins around to cover ::before's borders, making their appearance seem smooth

  @else if $style == 'circle' OR $style == 'spinTriangle' {
    &::before,
    &::after {
      top: 0;
      left: 0;
    }

    &::before {
      border: $borderWidth solid transparent; // We're animating border-color again
    }

    &:hover::before,
    &:focus::before,
    &.focused::before {
      border-top-color: $colorTextHover; // Show borders
      border-right-color: $colorTextHover;
      border-bottom-color: $colorTextHover;
      // Stagger border appearances
      /*  original :
     transition: border-top-color 0.15s linear, border-right-color 0.15s linear 0.1s,
        border-bottom-color 0.15s linear 0.2s; */
      transition: border-right-color 0s linear 0.2s, border-bottom-color 0s linear 0.4s;
    }

    &::after {
      border: 0 solid transparent;
    }

    @if $style == 'circle' {
      border-radius: 100%;
      box-shadow: none;

      transition: color 0s linear;

      &:hover,
      &.focused {
        transition: color 0.3s linear;
      }

      &::before,
      &::after {
        border-radius: 100%;
      }

      &::after {
        border: $borderWidth solid transparent; // Shows border
      }

      &:hover::after,
      &:focus::after,
      &.focused::after {
        border-top-color: $colorTextHover; // Shows border top
        border-left-color: $colorTextHover;

        transform: rotate(271deg); // Rotate around circle
        transition: transform 0.6s linear 0s, border-left-color 0s linear 0.6s;
        // Solid edge post-rotation
      }
    } @else if $style == 'spinTriangle' {
      &:hover::after,
      &:focus::after,
      &.focused::after {
        border-top: $borderWidth solid $colorTextHover; // Shows border
        border-left-width: $borderWidth; // Solid edges, invisible borders
        border-right-width: $borderWidth; // Solid edges, invisible borders
        transform: rotate(270deg); // Rotate around circle
        transition: transform 0.4s linear 0s, border-left-width 0s linear 0.35s;
      }

      // ! comment for only border effect
      /*   &:hover,
      &:focus,
      &.focused {
        color: $colorText;
      } */

      &::before {
        border: $borderWidth solid transparent;
        z-index: -1;
      }

      &::after {
        mix-blend-mode: color-dodge;
        z-index: -1;
      }

      &:hover::before,
      &:focus::before,
      &.focused::before {
        background-color: $colorTextHover;
        border-top-color: $colorTextHover;
        border-right-color: $colorTextHover;
        border-bottom-color: $colorTextHover;
        transition: background-color 0s linear 0.4s, border-top-color 0.15s linear,
          border-right-color 0.15s linear 0.15s, border-bottom-color 0.15s linear 0.25s;
      }

      &:hover::after,
      &:focus::after,
      &.focused::after {
        border-top: $borderWidth solid $colorTextHover;
        border-left-width: $borderWidth;
        border-right-width: $borderWidth;
      }
    }
  }
}

@mixin hover-underline-animation-shrink(
  $color: #fff,
  $bottom: -5%,
  $height: 0.2rem,
  $finalWidth: 60%,
  $className: hoverUnderlineAnimation
) {
  position: relative;
  display: block;
  color: inherit;
  text-decoration: none;
  width: auto;

  &::after {
    content: '';
    position: absolute;
    bottom: $bottom;
    left: 50%;
    transform: translateX(-50%);
    height: $height;
    width: 100%;
    background-color: transparent;
    transition: width 0.3s;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  &:hover,
  &:focus,
  &:active,
  &.#{$className} {
    outline: none;

    &::after {
      width: $finalWidth;
      background-color: $color;
    }
  }
}

@mixin hover-underline-animation-ltr($color: #fff) {
  position: relative;
  display: inline-block;

  &::after {
    content: '';
    position: absolute;
    transform: scaleX(0);
    height: 2px;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: $color;
    transform-origin: bottom right;

    transition: transform 0.2s ease-out;
    // transition-delay: 0.3s;
  }

  &:hover::after,
  &:focus::after,
  &.focused::after {
    transform: scaleX(1);
    transform-origin: bottom left;
    // transition-delay: 0.3s;
    transition: transform 0.6s ease-out;
  }
}
